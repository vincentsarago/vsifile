{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"vsifile","text":"<p>Documentation: vincentsarago.github.io/vsifile/</p> <p>Source Code: vincentsarago/vsifile</p>"},{"location":"#description","title":"Description","text":"<p>Experiment using Rasterio/GDAL Python file opener VSI plugin github.com/rasterio/rasterio/pull/2898/files</p> <p>Future version of rasterio will accept an custom dataset <code>opener</code>:</p> <p><pre><code>opener : callable, optional\n        A custom dataset opener which can serve GDAL's virtual\n        filesystem machinery via Python file-like objects. The\n        underlying file-like object is obtained by calling *opener* with\n        (*fp*, *mode*) or (*fp*, *mode* + \"b\") depending on the format\n        driver's native mode. *opener* must return a Python file-like\n        object that provides read, seek, tell, and close methods.\n</code></pre> ref: github.com/rasterio/rasterio/blob/d966440c06f3324aca1fa761d490cc780a9f619c/rasterio/__init__.py#L185-L191</p>"},{"location":"#install","title":"Install","text":"<p>You can install <code>vsifile</code> using pip</p> <pre><code>python -m pip install -U pip\npython -m pip install -U vsifile\n</code></pre> <p>or install from source:</p> <pre><code>git clone https://github.com/vincentsarago/vsifile.git\ncd vsifile\npython -m pip install -U pip\npython -m pip install -e .\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<pre><code>from vsifile import VSIFile, FileReader\n\nsrc_path = \"tests/fixture.cog.tif\"\n\nwith VSIFile(src_path, \"rb\") as f:\n    assert isinstance(f, FileReader)\n    assert hash(f)\n    assert \"FileReader\" in str(f)\n\n    assert not f.closed\n    assert f.header_cache\n    assert len(f.header) == 32768\n    assert f.tell() == 0\n    assert f.seekable\n\n    b = f.read(100)\n    assert len(b) == 100\n    assert f.header[0:100] == b\n    assert f.tell() == 100\n\n    _ = f.seek(0)\n    assert f.tell() == 0\n\n    _ = f.seek(40000)\n    assert f.tell() == 40000\n\n    b = f.read(100)\n    assert f.tell() == 40100\n\n    # fetch the same block (should be from LRU cache)\n    _ = f.seek(40000)\n    b_cache = f.read(100)\n    assert f.tell() == 40100\n    assert b_cache == b\n\n    b = f.get_byte_ranges([100, 200], [10, 20])\n    assert len(b) == 2\n    assert len(b[0]) == 10\n    assert len(b[1]) == 20\n    assert f.tell() == 220\n</code></pre>"},{"location":"#with-rasterio","title":"With Rasterio","text":"<pre><code>import rasterio\nfrom vsifile.rasterio import opener\n\nwith rasterio.open(\"tests/fixtures/cog.tif\",  opener=opener) as src:\n    ...\n</code></pre>"},{"location":"#caches-configuration","title":"Caches Configuration","text":""},{"location":"#header-cache","title":"Header Cache","text":"<p>vsifile uses DiskCache to create a persistent File Header cache (TTL: Time To Live cache). By default the cache will be cleaned up when closing the file handle, you can change this behaviour by setting <code>VSIFILE_CACHE_DIRECTORY=\"{your temp directory}\"</code> environment variable.</p> <p>Settings:</p> <ul> <li>VSIFILE_CACHE_DIRECTORY: Diskcache directory (defaults to <code>None</code>)</li> <li>VSIFILE_CACHE_HEADERS_TTL: Time to Live of each object in the cache, in seconds (defaults to <code>300</code>)</li> <li>VSIFILE_CACHE_HEADERS_MAXSIZE: Maximum size of the cache, in Bytes (defaults to <code>5120000000</code>)</li> </ul>"},{"location":"#block-cache","title":"Block Cache","text":"<p>vsifile has a second layer of cache for the <code>blocks</code> (non-header read) based on cachetools.</p> <p>Settings:</p> <ul> <li>VSIFILE_CACHE_BLOCKS_TTL: Time to Live of each object in the cache, in seconds (defaults to <code>300</code>)</li> <li>VSIFILE_CACHE_BLOCKS_MAXSIZE: Maximum size of the cache, in number of items (defaults to <code>512</code>)</li> </ul> <p>Note: you can disable cache by setting: VSIFILE_CACHE_DISABLE=TRUE</p>"},{"location":"#other-configurations","title":"Other Configurations","text":"<ul> <li>VSIFILE_INGESTED_BYTES_AT_OPEN: Bytes ingested when opening a file (header) (defaults to <code>32768</code>)</li> </ul>"},{"location":"#contribution-development","title":"Contribution &amp; Development","text":"<p>See CONTRIBUTING.md</p>"},{"location":"#changes","title":"Changes","text":"<p>See CHANGES.md.</p>"},{"location":"#license","title":"License","text":"<p>See LICENSE</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Issues and pull requests are more than welcome.</p>"},{"location":"contributing/#dev-install","title":"dev install","text":"<pre><code>$ git clone https://github.com/vincentsarago/vsifile.git\n$ cd vsifile\n$ python -m pip install -e .[\"dev\"]\n</code></pre> <p>You can then run the tests with the following command:</p> <pre><code>python -m pytest --cov vsifile --cov-report term-missing -s -vv\n</code></pre>"},{"location":"contributing/#performance-tests","title":"Performance tests","text":"<pre><code>python -m pip install -e \".[benchmark]\"\npython -m pytest tests/benchmarks.py --benchmark-only --benchmark-columns 'min, max, mean, median' --benchmark-sort 'min'\n</code></pre>"},{"location":"contributing/#pre-commit","title":"pre-commit","text":"<p>This repo is set to use <code>pre-commit</code> to run isort, mypy and ruff when committing new code.</p> <pre><code>$ pre-commit install\n</code></pre>"},{"location":"release-notes/","title":"0.4.1 (2025-06-25)","text":"<ul> <li>update Obstore requirements to <code>&gt;=0.5,&lt;0.7</code></li> <li>avoid pydantic settings errors to allow more env (author @lukasbindreiter)</li> </ul>"},{"location":"release-notes/#040-2025-03-19","title":"0.4.0 (2025-03-19)","text":"<ul> <li>update Obstore requirements to <code>&gt;=0.5,&lt;0.6</code></li> </ul>"},{"location":"release-notes/#030-2025-02-28","title":"0.3.0 (2025-02-28)","text":"<ul> <li> <p>replace <code>HEAD</code> with <code>GET</code> request on file opening</p> </li> <li> <p>cache <code>header</code> and file <code>metadata</code> to the Header Cache</p> </li> <li> <p>add <code>kwargs</code> to <code>vsifile.rasterio.VSIOpener</code> class to forward configurations (config, client_config, retry_config) to the <code>obstore.Store</code></p> <pre><code>import rasterio\nfrom vsifile.rasterio import VSIOpener\n\n# This would fail if no AWS credentials are found\nwith rasterio.open(\n    \"s3://sentinel-cogs/sentinel-s2-l2a-cogs/15/T/VK/2023/10/S2B_15TVK_20231008_0_L2A/TCI.tif\",\n    opener=VSIOpener()\n):\n    pass\n\n# We forward `skip_signature` to Obstore.store.S3Store creation\nwith rasterio.open(\n    \"s3://sentinel-cogs/sentinel-s2-l2a-cogs/15/T/VK/2023/10/S2B_15TVK_20231008_0_L2A/TCI.tif\",\n    opener=VSIOpener(\n        config={\"skip_signature\": True, \"aws_region\": \"us-west-2\"}\n    ),\n):\n    ...\n</code></pre> </li> </ul>"},{"location":"release-notes/#020-2025-02-26","title":"0.2.0 (2025-02-26)","text":"<ul> <li>switch to <code>Obstore</code> for I/O (vincentsarago/vsifile!15)</li> <li>refactor logging messages</li> <li><code>rasterio.VSIOpener.mtime</code> and <code>rasterio.VSIOpener.size</code> now return fake values (<code>0</code> and <code>1</code>) (vincentsarago/vsifile!16)</li> </ul>"},{"location":"release-notes/#010-2024-10-11","title":"0.1.0 (2024-10-11)","text":"<ul> <li>first initial release</li> </ul>"}]}